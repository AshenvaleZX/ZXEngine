Vertex
{
    Input
    {
        0 vec3 aPos : POSITION
    }

    Properties
    {
        using ENGINE_Model
    }

    Program
    {
        void main()
        {
            ZX_Position = mul(ENGINE_Model * vec4(aPos, 1.0));
        }
    }
}

Geometry
{
    GSInOut
    {
        in(triangles)
        out(18)
    }

    Output
    {
        0 vec4 FragPos : TEXCOORD0
    }

    Properties
    {
        mat4 _ShadowMatrices[6]
    }

    Program
    {
        void main()
        {
            for(int face = 0; face < 6; ++face)
            {
                ZX_TargetIndex = face; // built-in variable that specifies to which face we render.
                for(int i = 0; i < 3; ++i) // for each triangle's vertices
                {
                    FragPos = ZX_GS_IN[i].GS_IN_Position;
                    ZX_Position = mul(_ShadowMatrices[face] * FragPos);
                    EmitVertex();
                }
                EndPrimitive();
            }
        }
    }
}

Fragment
{
    Input
    {
        0 vec4 FragPos : TEXCOORD0
    }

    Properties
    {
        vec3 _LightPos
        float _FarPlane
    }

    Program
    {
        void main()
        {
            float lightDistance = length(FragPos.xyz - _LightPos);
            
            // map to [0;1] range by dividing by _FarPlane
            lightDistance = lightDistance / _FarPlane;
            
            // write this as modified depth
            ZX_Depth = lightDistance;
        }
    }
}