Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite On
    RenderQueue Opaque
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
        2 vec3 aNormal    : NORMAL
    }

    Output
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
        using ENGINE_Model_Inv
    }

    Program
    {
        void main()
        {
            WorldPos = to_vec3(mul(ENGINE_Model * vec4(aPos, 1.0)));
            Normal = mul(transpose(to_mat3(ENGINE_Model_Inv)) * aNormal);
            ZX_Position = mul(ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0));
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        vec4 _Color
        float _Ambient
        float _Diffuse
    }

    Program
    {
        void main()
        {           
            // ambient
            vec3 ambient = _Ambient * _Color.rgb;
            // diffuse
            vec3 lightDir = vec3(0.57735, 0.57735, 0.57735);
            vec3 normal = normalize(Normal);
            float diff = max(dot(lightDir, normal), 0.0);
            vec3 diffuse = diff * _Diffuse * _Color.rgb;

            FragColor = vec4(ambient + diffuse, 1.0);
        }
    }
}