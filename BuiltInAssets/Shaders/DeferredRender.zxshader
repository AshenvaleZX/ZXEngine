Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite On
    RenderQueue Opaque
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
    }

    Output
    {
        0 vec2 TexCoords : TEXCOORD0
    }

    Program
    {
        void main()
        {
            TexCoords = aTexCoords;    
            ZX_Position = vec4(aPos.x, aPos.y, 0.0, 1.0);
        }
    }
}

Fragment
{
    Input
    {
        0 vec2 TexCoords : TEXCOORD0
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        using ENGINE_G_Buffer_Position
        using ENGINE_G_Buffer_Normal
        using ENGINE_G_Buffer_Albedo

        float _LightNum
        vec4 _LightPositions[32]
        vec4 _LightColors[32]
    }

    Program
    {
        void main()
        {
            vec3 lighting = vec3(0, 0, 0);
            vec3 albedo = texture(ENGINE_G_Buffer_Albedo, TexCoords).rgb;
            vec3 normal = texture(ENGINE_G_Buffer_Normal, TexCoords).rgb;
            vec3 position = texture(ENGINE_G_Buffer_Position, TexCoords).rgb;

            for(int i = 0; i < 32; i++)
            {
                vec3 lightDir = normalize(_LightPositions[i].xyz - position);
                float diff = max(dot(normal, lightDir), 0.0);
                vec3 diffuse = _LightColors[i].rgb * diff;
                lighting += diffuse;
            }

            FragColor = vec4(albedo * lighting, 1.0);
        }
    }
}