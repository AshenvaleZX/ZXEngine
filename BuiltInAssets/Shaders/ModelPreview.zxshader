Vertex
{
    Input
    {
        0 vec3 aPos
        1 vec3 aNormal
    }

    Output
    {
        0 vec3 Normal
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
    }

    Program
    {
        void main()
        {
            Normal = transpose(inverse(mat3(ENGINE_Model))) * aNormal;
            gl_Position = ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0);
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 Normal
    }

    Output
    {
        0 vec4 FragColor
    }

    Properties
    {
        vec3 _Direction
    }

    Program
    {
        void main()
        {
            vec3 color = vec3(0.5, 0.5, 0.5);
            // ambient
            vec3 ambient = 0.05 * color;
            // diffuse
            vec3 lightDir = normalize(_Direction);
            vec3 normal = normalize(Normal);
            float diff = max(dot(lightDir, normal), 0.0);
            vec3 diffuse = diff * color;

            FragColor = vec4(ambient + diffuse, 1.0);
        }
    }
}