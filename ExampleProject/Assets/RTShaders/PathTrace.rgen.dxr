#pragma pack_matrix(column_major)

SamplerState _SampleLinearWrap       : register(s0);
SamplerState _SampleLinearClamp      : register(s1);
SamplerState _SampleAnisotropicWrap  : register(s2);
SamplerState _SampleAnisotropicClamp : register(s3);

// TLAS                         (SRV)
RaytracingAccelerationStructure _TLAS           : register(t0, space0);
// Output Image                 (UAV)
RWTexture2D<float4>             _Image          : register(u0, space0);
// Index Buffer                 (SRV)
ByteAddressBuffer               _IndexBuffer[]  : register(t0, space1);
// Vertex Buffer                (SRV)
ByteAddressBuffer               _VertexBuffer[] : register(t0, space2);
// Material Data Buffer         (SRV)
ByteAddressBuffer               _MaterialData[] : register(t0, space3);
// All 2D Texture               (SRV，DescriptorTable)
Texture2D<float4>               _Textures[]     : register(t0, space4);
// All CubeMap Texture          (SRV，DescriptorTable)
TextureCube                     _CubeMaps[]     : register(t0, space5);
// Constant Buffer              (CBV)
cbuffer RayTracingPipelineConstants             : register(b0, space0)
{
    float4x4 _VP;
    float4x4 _V_Inv;
    float4x4 _P_Inv;
    float3   _LightPos;
    uint     _FrameCount;
    float    _Time;
};

struct HitPayload
{
    float3 hitValue;
    uint   seed;
    uint   depth;
    float3 rayOrigin;
    float3 rayDirection;
    float3 weight;
};

// The algorithm comes from Zafar, Olano, and Curtis's paper "GPU Random Numbers via the Tiny Encryption Algorithm"
uint TinyEncryptionAlgorithm(uint val0, uint val1)
{
    uint v0 = val0;
    uint v1 = val1;
    uint s0 = 0;

    for(uint n = 0; n < 16; n++)
    {
        s0 += 0x9e3779b9;
        v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
        v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
    }

    return v0;
}

[shader("raygeneration")]
void main()
{
    HitPayload _RayPayload;
    _RayPayload.hitValue = float3(0, 0, 0);

    uint2 launchIndex = DispatchRaysIndex().xy;
    const float2 pixelCenter = float2(launchIndex) + float2(0.5, 0.5);
    const float2 inUV = pixelCenter / float2(DispatchRaysDimensions().xy);
    float2 d = inUV * 2.0 - 1.0;

    // Camera world space position
    float4 origin = mul(_V_Inv, float4(0, 0, 0, 1));
    // Current ray in view space
    float4 target = mul(_P_Inv, float4(d.x, -d.y, 1, 1));
    // Perspective divide
    target = target / target.w;
    // Transform form View Space to World Space
    float4 direction = mul(_V_Inv, float4(normalize(target.xyz), 0));

    // Random Seed
    uint seed = TinyEncryptionAlgorithm(launchIndex.y * DispatchRaysDimensions().x + launchIndex.x, asuint(round(_Time * 1000)));

    uint rayFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    
    RayDesc ray;
    ray.TMin = 0.001;
    ray.TMax = 10000.0;

    _RayPayload.hitValue     = float3(0, 0, 0);
    _RayPayload.seed         = seed;
    _RayPayload.depth        = 0;
    _RayPayload.rayOrigin    = origin.xyz;
    _RayPayload.rayDirection = direction.xyz;
    _RayPayload.weight       = float3(0, 0, 0);

    float3 curWeight = float3(1, 1, 1);
    float3 hitValue  = float3(0, 0, 0);

    for(; _RayPayload.depth < 10; _RayPayload.depth++)
    {
        ray.Origin = _RayPayload.rayOrigin;
        ray.Direction = _RayPayload.rayDirection;

        TraceRay(_TLAS,     // acceleration structure
                rayFlags,   // RayFlags
                0xFF,       // InstanceInclusionMask
                0,          // RayContributionToHitGroupIndex
                0,          // MultiplierForGeometryContributionToHitGroupIndex
                0,          // MissShaderIndex
                ray,        // Ray
                _RayPayload // Payload
        );

        hitValue += _RayPayload.hitValue * curWeight;
        curWeight *= _RayPayload.weight;
    }

    // Accumulate result
    if(_FrameCount > 0)
    {
        float a = 1.0f / float(_FrameCount + 1);
        float3 old_color = _Image[launchIndex].xyz;
        _Image[launchIndex] = float4(lerp(old_color, hitValue, a), 1.0);
    }
    else
    {
        _Image[launchIndex] = float4(hitValue, 1.0);
    }
}