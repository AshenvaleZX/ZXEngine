#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

struct HitPayload
{
    vec3 hitValue;
};

struct RayTracingPipelineConstants
{
    mat4 VP;
    mat4 V_Inv;
    mat4 P_Inv;
    vec3 lightPos;
};

layout(location = 0) rayPayloadEXT HitPayload _RayPayload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT _TLAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D _Image;
layout(push_constant) uniform _PushConstant { RayTracingPipelineConstants _PC; };

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    // 倒推出相机的 World Space 坐标
    vec4 origin    = _PC.V_Inv * vec4(0, 0, 0, 1);
    // 从NDC倒推出当前光线在 View Space 的坐标
    vec4 target    = _PC.P_Inv * vec4(d.x, d.y, 1, 1);
    // 手动透视除法
    target = target / target.w;
    // 再把光线方向从 View Space 转到 World Space
    vec4 direction = _PC.V_Inv * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    traceRayEXT(_TLAS,          // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
    );

    imageStore(_Image, ivec2(gl_LaunchIDEXT.xy), vec4(_RayPayload.hitValue, 1.0));
}