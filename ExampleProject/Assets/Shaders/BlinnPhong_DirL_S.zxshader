Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite On
    RenderQueue Opaque
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
        2 vec3 aNormal    : NORMAL
    }

    Output
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
        3 vec4 LSpacePos : TEXCOORD3
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
        using ENGINE_Model_Inv
        using ENGINE_Light_Mat
    }

    Program
    {
        void main()
        {
            WorldPos = to_vec3(mul(ENGINE_Model * vec4(aPos, 1.0)));
            LSpacePos = mul(ENGINE_Light_Mat * vec4(WorldPos, 1.0));
            Normal = mul(transpose(to_mat3(ENGINE_Model_Inv)) * aNormal);
            TexCoords = aTexCoords;
            ZX_Position = mul(ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0));
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
        3 vec4 LSpacePos : TEXCOORD3
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        using ENGINE_Light_Dir
        using ENGINE_Camera_Pos
        using ENGINE_Shadow_Map

        float _Ambient
        float _Specular
        sampler2D _Texture1
    }

    Program
    {
        float ShadowCalculation(vec4 fragPos)
        {
            int samples = 4;
            float bias = 0.003;
            float shadow = 0.0;

            vec2 texSize = vec2(1, 1);
            GetTextureSize(ENGINE_Shadow_Map, texSize);
            float offset = 1.0 / texSize.x;

            array<vec2, 9> gridSamplingDisk = 
            {
                vec2(-offset,  offset), vec2(0,  offset), vec2(offset,  offset), 
                vec2(-offset,  0     ), vec2(0,  0     ), vec2(offset,  0     ), 
                vec2(-offset, -offset), vec2(0, -offset), vec2(offset, -offset)
            };

#ifdef ZX_API_OPENGL
            vec3 projCoords = fragPos.xyz / fragPos.w;
            projCoords = projCoords * 0.5 + 0.5;
            float currentDepth = projCoords.z;
#endif

#ifdef ZX_API_VULKAN
            vec3 projCoords = fragPos.xyz / fragPos.w;
            float currentDepth = projCoords.z;
            projCoords = projCoords * 0.5 + 0.5;
#endif

#ifdef ZX_API_D3D12
            vec3 projCoords = fragPos.xyz / fragPos.w;
            float currentDepth = projCoords.z;
            projCoords.y *= -1.0;
            projCoords = projCoords * 0.5 + 0.5;
#endif

            for(int i = 0; i < samples; ++i)
            {
                float closestDepth = texture(ENGINE_Shadow_Map, projCoords.xy + gridSamplingDisk[i]).r;
                if(currentDepth - bias > closestDepth)
                    shadow += 1.0;
            }

            shadow /= float(samples);
            return shadow;
        }

        void main()
        {
            vec3 color = texture(_Texture1, TexCoords).rgb;
            // ambient
            vec3 ambient = _Ambient * color;
            // diffuse
            vec3 lightDir = ENGINE_Light_Dir;
            vec3 normal = normalize(Normal);
            float diff = max(dot(lightDir, normal), 0.0);
            vec3 diffuse = diff * color;
            // specular
            vec3 viewDir = normalize(ENGINE_Camera_Pos - WorldPos);
            vec3 reflectDir = reflect(-lightDir, normal);
            vec3 halfwayDir = normalize(lightDir + viewDir);  
            float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
            vec3 specular = to_vec3(_Specular) * spec; // assuming bright white light color

            // 计算阴影
            float shadow = ShadowCalculation(LSpacePos);
            // 对漫反射的影响参数
            float shadowD = 1.0 - shadow / 2;
            // 对镜面反射的影响参数，这个值更小，因为被挡住了光源的直射，应该几乎没有镜面反射了
            float shadowS = 1.0 - shadow;
            // 计算添加了阴影后的光照颜色
            vec3 lightColor = shadowD * diffuse + shadowS * specular;

            FragColor = vec4(ambient + lightColor, 1.0);
        }
    }
}