Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite Off
    RenderQueue Transparent
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
        2 vec3 aNormal    : NORMAL
    }

    Output
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
        using ENGINE_Model_Inv
    }

    Program
    {
        void main()
        {
            WorldPos = to_vec3(mul(ENGINE_Model * vec4(aPos, 1.0)));
            Normal = mul(transpose(to_mat3(ENGINE_Model_Inv)) * aNormal);
            TexCoords = aTexCoords;
            ZX_Position = mul(ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0));
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        using ENGINE_Time
        using ENGINE_Camera_Pos
        float _Ambient
        float _Speed
        float _Width
        vec4 _Color
    }

    Program
    {
        void main()
        {
            vec3 wn = normalize(Normal);
            vec3 wv = normalize(ENGINE_Camera_Pos - WorldPos);
            float edge = (1.0 - dot(wn, wv)) * 2;

            vec3 temp = vec3(edge + _Ambient, edge + _Ambient, edge + _Ambient);
            vec3 color = temp * _Color.rgb;
            
            float alpha = fract((WorldPos.y - ENGINE_Time.x * _Speed) * _Width);
            if (alpha > 0.5)
                alpha = lerp(0.2, 0.6, (1 - alpha) * 2);
            else
                alpha = lerp(0.2, 0.6, alpha * 2);
            
            FragColor = vec4(color.r, color.g, color.b, alpha);
        }
    }
}