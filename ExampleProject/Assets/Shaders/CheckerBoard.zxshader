Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite On
    RenderQueue Opaque
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
        2 vec3 aNormal    : NORMAL
    }

    Output
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec2 TexCoords : TEXCOORD1
        2 vec3 Normal    : TEXCOORD2
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
        using ENGINE_Model_Inv
    }

    Program
    {
        void main()
        {
            Normal = mul(transpose(to_mat3(ENGINE_Model_Inv)) * aNormal);
            TexCoords = aTexCoords;
            WorldPos = to_vec3(mul(ENGINE_Model * vec4(aPos, 1.0)));
            ZX_Position = mul(ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0));
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec2 TexCoords : TEXCOORD1
        2 vec3 Normal    : TEXCOORD2
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        using ENGINE_Light_Pos
        using ENGINE_Camera_Pos
        using ENGINE_Shadow_Cube_Map
        using ENGINE_Far_Plane

        float _Scale
        float _Ambient
        float _Specular
    }

    Program
    {
        float ShadowCalculation(vec3 fragPos, vec3 lightPos, vec3 camPos, float farPlane)
        {
            array<vec3, 20> gridSamplingDisk = 
            {
                vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
                vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
                vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
                vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
                vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
            };

            vec3 fragToLight = fragPos - lightPos;
            float currentDepth = length(fragToLight);
            float shadow = 0.0;
            float bias = 0.05;
            int samples = 20;
            float viewDistance = length(camPos - fragPos);
            float soft = 5.0;
            float diskRadius = (1.0 + (viewDistance / farPlane)) / soft;

            for(int i = 0; i < samples; ++i)
            {
                float closestDepth = texture(ENGINE_Shadow_Cube_Map, fragToLight + gridSamplingDisk[i] * diskRadius).r;
                closestDepth *= farPlane;
                if(currentDepth - bias > closestDepth)
                    shadow += 1.0;
            }

            shadow /= float(samples);
            return shadow;
        }

        void main()
        {            
            vec2 uv = fract(TexCoords * _Scale);
            vec3 color = vec3(0.6, 0.6, 0.6);
            if (uv.x > 0.5 && uv.y > 0.5 || uv.x < 0.5 && uv.y < 0.5)
            {
                color = vec3(0.8, 0.8, 0.8);
            }

            vec3 N = normalize(Normal);
            // ambient
            vec3 ambient = _Ambient * color;
            // diffuse
            vec3 lightDir = normalize(ENGINE_Light_Pos - WorldPos);
            float diff = max(dot(lightDir, N), 0.0);
            vec3 diffuse = diff * color;
            // specular
            vec3 viewDir = normalize(ENGINE_Camera_Pos - WorldPos);
            vec3 reflectDir = reflect(-lightDir, N);
            vec3 halfwayDir = normalize(lightDir + viewDir);  
            float spec = pow(max(dot(N, halfwayDir), 0.0), 32.0);
            vec3 specular = to_vec3(_Specular) * spec; // assuming bright white light color

            // 计算阴影
            float shadow = ShadowCalculation(WorldPos, ENGINE_Light_Pos, ENGINE_Camera_Pos, ENGINE_Far_Plane);
            // 对漫反射的影响参数
            float shadowD = 1.0 - shadow / 2;
            // 对镜面反射的影响参数，这个值更小，因为被挡住了光源的直射，应该几乎没有镜面反射了
            float shadowS = 1.0 - shadow;
            // 计算添加了阴影后的光照颜色
            vec3 lightColor = shadowD * diffuse + shadowS * specular;

            FragColor = vec4(ambient + lightColor, 1.0);
        }
    }
}