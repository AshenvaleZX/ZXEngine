Setting 
{
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest Less
    ZWrite On
}

Vertex
{
    Input
    {
        0 vec3 aPos       : POSITION
        1 vec2 aTexCoords : TEXCOORD
        2 vec3 aNormal    : NORMAL
    }

    Output
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
    }

    Properties
    {
        using ENGINE_Model
        using ENGINE_View
        using ENGINE_Projection
        using ENGINE_Model_Inv
    }

    Program
    {
        void main()
        {
            WorldPos = to_vec3(ENGINE_Model * vec4(aPos, 1.0));
            Normal = transpose(to_mat3(ENGINE_Model_Inv)) * aNormal;
            TexCoords = aTexCoords;
            ZX_Position = ENGINE_Projection * ENGINE_View * ENGINE_Model * vec4(aPos, 1.0);
        }
    }
}

Fragment
{
    Input
    {
        0 vec3 WorldPos  : TEXCOORD0
        1 vec3 Normal    : TEXCOORD1
        2 vec2 TexCoords : TEXCOORD2
    }

    Output
    {
        0 vec4 FragColor : SV_Target
    }

    Properties
    {
        using ENGINE_Light_Pos
        using ENGINE_Camera_Pos
        sampler2D _Texture1
    }

    Program
    {
        void main()
        {           
            vec3 color = texture(_Texture1, TexCoords).rgb;
            // ambient
            vec3 ambient = 0.15 * color;
            // diffuse
            vec3 lightDir = normalize(ENGINE_Light_Pos - WorldPos);
            vec3 normal = normalize(Normal);
            float diff = max(dot(lightDir, normal), 0.0);
            vec3 diffuse = diff * color;
            // specular
            vec3 viewDir = normalize(ENGINE_Camera_Pos - WorldPos);
            vec3 reflectDir = reflect(-lightDir, normal);
            vec3 halfwayDir = normalize(lightDir + viewDir);  
            float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
            vec3 specular = to_vec3(1) * spec; // assuming bright white light color

            FragColor = vec4(ambient + diffuse + specular, 1.0);
        }
    }
}